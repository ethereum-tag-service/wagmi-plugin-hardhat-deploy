{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport type { ContractConfig, Plugin } from \"@wagmi/cli\";\nimport type { Abi, Address } from \"abitype\";\n\nexport interface ContractExport {\n    address: Address;\n    abi: Abi;\n    linkedData?: any;\n}\n\nexport interface Export {\n    chainId: string;\n    name: string;\n    contracts: {\n        [name: string]: ContractExport;\n    };\n}\n\nexport interface HardhatDeployOptions {\n    directory: string;\n    includes?: RegExp[];\n    excludes?: RegExp[];\n    include_networks?: string[];\n    exclude_networks?: string[];\n}\n\nconst shouldInclude = (name: string, config: HardhatDeployOptions): boolean => {\n    if (config.excludes) {\n        // if there is a list of excludes, then if the name matches any of them, then exclude\n        for (const exclude of config.excludes) {\n            if (exclude.test(name)) {\n                return false;\n            }\n        }\n    }\n    if (config.includes) {\n        // if there is a list of includes, then only include if the name matches any of them\n        for (const include of config.includes) {\n            if (include.test(name)) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        // if there is no list of includes, then include everything\n        return true;\n    }\n};\n\nconst shouldIncludeFile = (\n    fileName: string,\n    config: HardhatDeployOptions\n): boolean => {\n    // Extract the network name from the file name (assumes format \"networkName.json\")\n    const networkName = path.basename(fileName, \".json\");\n\n    // Handle network-based includes\n    if (config.include_networks && config.include_networks.length > 0) {\n        if (!config.include_networks.includes(networkName)) {\n            return false;\n        }\n    }\n\n    // Handle network-based excludes\n    if (config.exclude_networks && config.exclude_networks.length > 0) {\n        if (config.exclude_networks.includes(networkName)) {\n            return false;\n        }\n    }\n\n    return true; // Default to include if no specific rules are set\n};\n\nconst plugin = (config: HardhatDeployOptions): Plugin => {\n    return {\n        name: \"hardhat-deploy\",\n        contracts: () => {\n            // list all files exported by hardhat-deploy\n            const files = fs\n                .readdirSync(config.directory)\n                .filter((file) => shouldIncludeFile(file, config));\n\n            // build a collection of contracts as expected by wagmi (ContractConfig) indexed by name\n            const contracts = files.reduce<Record<string, ContractConfig>>(\n                (acc, file) => {\n                    // read export file (hardhat-deploy format)\n                    const filename = path.join(config.directory, file);\n                    const deployment = JSON.parse(\n                        fs.readFileSync(filename).toString()\n                    ) as Export;\n                    const chainId = parseInt(deployment.chainId);\n\n                    // merge this contract with potentially existing contract from other chain\n                    Object.entries(deployment.contracts).forEach(\n                        ([name, { abi, address }]) => {\n                            if (shouldInclude(name, config)) {\n                                const contract = acc[name] || {\n                                    name,\n                                    abi,\n                                    address: {},\n                                };\n                                const addresses = contract.address as Record<\n                                    number,\n                                    Address\n                                >;\n                                addresses[chainId] = address;\n                                acc[name] = contract;\n                            }\n                        }\n                    );\n\n                    return acc;\n                },\n                {}\n            );\n\n            // simplify address structure if addresses on all chains are the same\n            Object.values(contracts).forEach((contract) => {\n                const addresses = Object.values(\n                    contract.address as Record<number, Address>\n                );\n                // build a unique list of addresses\n                const unique = [...new Set(addresses)];\n\n                // replace field with a single address if all addresses are the same\n                contract.address =\n                    unique.length === 1 ? unique[0] : contract.address;\n            });\n\n            return Object.values(contracts);\n        },\n    };\n};\n\nexport default plugin;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AA0BjB,IAAM,gBAAgB,CAAC,MAAc,WAA0C;AAC3E,MAAI,OAAO,UAAU;AAEjB,eAAW,WAAW,OAAO,UAAU;AACnC,UAAI,QAAQ,KAAK,IAAI,GAAG;AACpB,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,OAAO,UAAU;AAEjB,eAAW,WAAW,OAAO,UAAU;AACnC,UAAI,QAAQ,KAAK,IAAI,GAAG;AACpB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX,OAAO;AAEH,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,oBAAoB,CACtB,UACA,WACU;AAEV,QAAM,cAAc,YAAAA,QAAK,SAAS,UAAU,OAAO;AAGnD,MAAI,OAAO,oBAAoB,OAAO,iBAAiB,SAAS,GAAG;AAC/D,QAAI,CAAC,OAAO,iBAAiB,SAAS,WAAW,GAAG;AAChD,aAAO;AAAA,IACX;AAAA,EACJ;AAGA,MAAI,OAAO,oBAAoB,OAAO,iBAAiB,SAAS,GAAG;AAC/D,QAAI,OAAO,iBAAiB,SAAS,WAAW,GAAG;AAC/C,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO;AACX;AAEA,IAAM,SAAS,CAAC,WAAyC;AACrD,SAAO;AAAA,IACH,MAAM;AAAA,IACN,WAAW,MAAM;AAEb,YAAM,QAAQ,UAAAC,QACT,YAAY,OAAO,SAAS,EAC5B,OAAO,CAAC,SAAS,kBAAkB,MAAM,MAAM,CAAC;AAGrD,YAAM,YAAY,MAAM;AAAA,QACpB,CAAC,KAAK,SAAS;AAEX,gBAAM,WAAW,YAAAD,QAAK,KAAK,OAAO,WAAW,IAAI;AACjD,gBAAM,aAAa,KAAK;AAAA,YACpB,UAAAC,QAAG,aAAa,QAAQ,EAAE,SAAS;AAAA,UACvC;AACA,gBAAM,UAAU,SAAS,WAAW,OAAO;AAG3C,iBAAO,QAAQ,WAAW,SAAS,EAAE;AAAA,YACjC,CAAC,CAAC,MAAM,EAAE,KAAK,QAAQ,CAAC,MAAM;AAC1B,kBAAI,cAAc,MAAM,MAAM,GAAG;AAC7B,sBAAM,WAAW,IAAI,IAAI,KAAK;AAAA,kBAC1B;AAAA,kBACA;AAAA,kBACA,SAAS,CAAC;AAAA,gBACd;AACA,sBAAM,YAAY,SAAS;AAI3B,0BAAU,OAAO,IAAI;AACrB,oBAAI,IAAI,IAAI;AAAA,cAChB;AAAA,YACJ;AAAA,UACJ;AAEA,iBAAO;AAAA,QACX;AAAA,QACA,CAAC;AAAA,MACL;AAGA,aAAO,OAAO,SAAS,EAAE,QAAQ,CAAC,aAAa;AAC3C,cAAM,YAAY,OAAO;AAAA,UACrB,SAAS;AAAA,QACb;AAEA,cAAM,SAAS,CAAC,GAAG,IAAI,IAAI,SAAS,CAAC;AAGrC,iBAAS,UACL,OAAO,WAAW,IAAI,OAAO,CAAC,IAAI,SAAS;AAAA,MACnD,CAAC;AAED,aAAO,OAAO,OAAO,SAAS;AAAA,IAClC;AAAA,EACJ;AACJ;AAEA,IAAO,cAAQ;","names":["path","fs"]}